java.lang.RuntimeException: Caught exception in parsing: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 1 of 1-byte UTF-8 sequence.
Iteration: 1000 Flow: 0.21146067010402922
Iteration: 2000 Flow: 0.09866868855769265
Iteration: 3000 Flow: 0.050912549073914876
Iteration: 4000 Flow: 0.025621194997759132
Iteration: 5000 Flow: 0.011880979723531773
Iteration: 6000 Flow: 0.006381761049324735
Iteration: 7000 Flow: 0.0029842620216045564
Iteration: 8000 Flow: 0.0014105553956333954
===========================================================================
Missing entry points in rechenknecht.cased.de/eclipse-large/CallGraph-static.gxl.gz:
===========================================================================
0.0 java.lang.UNIXProcess$1$1: run()
===========================================================================
Missing call edges in rechenknecht.cased.de/eclipse-large/CallGraph-static.gxl.gz:
===========================================================================
0.0 org.eclipse.core.internal.registry.osgi.Activator: start(Lorg/osgi/framework/BundleContext;) ===> java.lang.ClassLoader: loadClassInternal(Ljava/lang/String;)
0.09570312500028125 java.io.File: checkAndCreate(Ljava/lang/String;Ljava/lang/SecurityManager;) ===> java.io.UnixFileSystem: createFileExclusively(Ljava/lang/String;)
0.109375 java.lang.StringCoding$StringEncoder: <init>(Ljava/nio/charset/Charset;Ljava/lang/String;) ===> sun.nio.cs.UTF_8: newEncoder()
0.124999999996375 java.lang.ref.Finalizer: runFinalizer() ===> java.lang.ref.Finalizer: hasBeenFinalized()
0.124999999996625 sun.reflect.DelegatingMethodAccessorImpl: invoke(Ljava/lang/Object;[Ljava/lang/Object;) ===> sun.reflect.GeneratedMethodAccessor1: invoke(Ljava/lang/Object;[Ljava/lang/Object;)
0.125 java.lang.ClassLoader: loadLibrary(Ljava/lang/Class;Ljava/lang/String;Z) ===> org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader: findLibrary(Ljava/lang/String;)
0.1373460116978922 java.io.File: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.io.UnixFileSystem: prefixLength(Ljava/lang/String;)
0.15285111794848097 java.io.File: <init>(Ljava/io/File;Ljava/lang/String;) ===> java.io.UnixFileSystem: prefixLength(Ljava/lang/String;)
0.17892728265471608 java.io.File: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.io.UnixFileSystem: resolve(Ljava/lang/String;Ljava/lang/String;)
0.234374999996125 java.io.File: canWrite() ===> java.io.UnixFileSystem: checkAccess(Ljava/io/File;I)
0.23437499999775 java.io.File: createNewFile() ===> java.io.UnixFileSystem: createFileExclusively(Ljava/lang/String;)
0.234374999999375 java.io.File: length() ===> java.io.UnixFileSystem: getLength(Ljava/io/File;)
0.2343749999995 java.io.File: renameTo(Ljava/io/File;) ===> java.io.UnixFileSystem: rename(Ljava/io/File;Ljava/io/File;)
0.26690366569173185 java.io.File: <init>(Ljava/lang/String;) ===> java.io.UnixFileSystem: prefixLength(Ljava/lang/String;)
0.28442632898717385 java.io.File: isDirectory() ===> java.io.UnixFileSystem: getBooleanAttributes(Ljava/io/File;)
0.30614455034965493 java.io.File: isHidden() ===> java.io.UnixFileSystem: getBooleanAttributes(Ljava/io/File;)
0.3068732809806029 java.io.File: getCanonicalPath() ===> java.io.UnixFileSystem: resolve(Ljava/io/File;)
0.32323038472301474 java.io.File: <init>(Ljava/io/File;Ljava/lang/String;) ===> java.io.UnixFileSystem: normalize(Ljava/lang/String;)
0.35277895408623144 java.io.File: <init>(Ljava/io/File;Ljava/lang/String;) ===> java.io.UnixFileSystem: resolve(Ljava/lang/String;Ljava/lang/String;)
0.35940857133455006 java.io.File: exists() ===> java.io.UnixFileSystem: getBooleanAttributes(Ljava/io/File;)
0.4028874247683038 java.io.File: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.io.UnixFileSystem: normalize(Ljava/lang/String;)
0.40692538910781373 java.io.File: isFile() ===> java.io.UnixFileSystem: getBooleanAttributes(Ljava/io/File;)
0.44193443898281976 java.io.File: getCanonicalFile() ===> java.io.UnixFileSystem: prefixLength(Ljava/lang/String;)
0.46656239362214535 java.io.File: <init>(Ljava/lang/String;Ljava/io/File;) ===> java.io.UnixFileSystem: resolve(Ljava/lang/String;Ljava/lang/String;)
0.487091064413801 org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType: <init>(I[C[C[C[[CC) ===> org.eclipse.jdt.internal.compiler.env.IBinaryType: <clinit>()
0.5009955924912233 java.io.File: <init>(Ljava/lang/String;) ===> java.io.UnixFileSystem: normalize(Ljava/lang/String;)
0.5512046813522246 java.nio.charset.CharsetEncoder: replaceWith([B) ===> sun.nio.cs.UTF_8$Encoder: isLegalReplacement([B)
0.6073040961438237 java.io.File: lastModified() ===> java.io.UnixFileSystem: getLastModifiedTime(Ljava/io/File;)
0.6073040961645234 java.io.File: list() ===> java.io.UnixFileSystem: list(Ljava/io/File;)
0.684297746899714 java.nio.charset.CharsetEncoder: encode(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z) ===> sun.nio.cs.UTF_8$Encoder: encodeLoop(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)
0.6993421985262381 sun.reflect.DelegatingConstructorAccessorImpl: newInstance([Ljava/lang/Object;) ===> sun.reflect.GeneratedConstructorAccessor2: newInstance([Ljava/lang/Object;)
0.6993421985265085 sun.reflect.DelegatingConstructorAccessorImpl: newInstance([Ljava/lang/Object;) ===> sun.reflect.GeneratedConstructorAccessor1: newInstance([Ljava/lang/Object;)
0.6993421985275464 sun.reflect.DelegatingConstructorAccessorImpl: newInstance([Ljava/lang/Object;) ===> sun.reflect.GeneratedConstructorAccessor5: newInstance([Ljava/lang/Object;)
0.6993421985287512 sun.reflect.DelegatingConstructorAccessorImpl: newInstance([Ljava/lang/Object;) ===> sun.reflect.GeneratedConstructorAccessor4: newInstance([Ljava/lang/Object;)
0.6993421985318943 sun.reflect.DelegatingConstructorAccessorImpl: newInstance([Ljava/lang/Object;) ===> sun.reflect.GeneratedConstructorAccessor6: newInstance([Ljava/lang/Object;)
0.6993421985330737 sun.reflect.DelegatingConstructorAccessorImpl: newInstance([Ljava/lang/Object;) ===> sun.reflect.GeneratedConstructorAccessor3: newInstance([Ljava/lang/Object;)
0.7700238806426446 java.io.File$LazyInitialization: temporaryDirectory() ===> java.io.UnixFileSystem: normalize(Ljava/lang/String;)
0.7778571517185782 java.io.File: getAbsolutePath() ===> java.io.UnixFileSystem: resolve(Ljava/io/File;)
0.9313938568790207 java.lang.StringCoding$StringDecoder: <init>(Ljava/nio/charset/Charset;Ljava/lang/String;) ===> sun.nio.cs.UTF_8: newDecoder()
0.9444195771418076 sun.nio.cs.StreamDecoder: <init>(Ljava/io/InputStream;Ljava/lang/Object;Ljava/nio/charset/Charset;) ===> sun.nio.cs.UTF_8: newDecoder()
0.9958216069163438 java.lang.Object: <init>() ===> java.lang.ref.Finalizer: register(Ljava/lang/Object;)
0.9990352341621601 sun.reflect.NativeConstructorAccessorImpl: newInstance0(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;) ===> sun.reflect.GeneratedMethodAccessor2: <init>()
0.9990352342025759 sun.reflect.NativeConstructorAccessorImpl: newInstance0(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;) ===> sun.reflect.GeneratedMethodAccessor1: <init>()
0.9990352342459318 sun.reflect.NativeConstructorAccessorImpl: newInstance0(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;) ===> org.eclipse.core.internal.content.TextContentDescriber: <clinit>()
1.1185920987404585 sun.nio.cs.ThreadLocalCoders$1: create(Ljava/lang/Object;) ===> sun.nio.cs.UTF_8: newDecoder()
1.9091667637334508 java.io.File: isAbsolute() ===> java.io.UnixFileSystem: isAbsolute(Ljava/io/File;)
2.99487455039121 java.io.File: delete() ===> java.io.UnixFileSystem: delete(Ljava/io/File;)
7.976132496561931 java.nio.charset.CharsetDecoder: decode(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z) ===> sun.nio.cs.UTF_8$Decoder: decodeLoop(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;)
9.976555300053507 java.io.File: getCanonicalPath() ===> java.io.UnixFileSystem: canonicalize(Ljava/lang/String;)
===========================================================================
Number of reachable methods missing in rechenknecht.cased.de/eclipse-large/CallGraph-static.gxl.gz: 85
===========================================================================
java.io.ExpiringCache$1: removeEldestEntry(Ljava/util/Map$Entry;)
java.io.ExpiringCache$Entry: <init>(JLjava/lang/String;)
java.io.ExpiringCache$Entry: timestamp()
java.io.ExpiringCache$Entry: val()
java.io.ExpiringCache: access$000(Ljava/io/ExpiringCache;)
java.io.ExpiringCache: cleanup()
java.io.ExpiringCache: clear()
java.io.ExpiringCache: entryFor(Ljava/lang/String;)
java.io.ExpiringCache: get(Ljava/lang/String;)
java.io.ExpiringCache: put(Ljava/lang/String;Ljava/lang/String;)
java.io.File: getPrefixLength()
java.io.FileNotFoundException: <init>(Ljava/lang/String;Ljava/lang/String;)
java.io.UnixFileSystem: canonicalize(Ljava/lang/String;)
java.io.UnixFileSystem: canonicalize0(Ljava/lang/String;)
java.io.UnixFileSystem: checkAccess(Ljava/io/File;I)
java.io.UnixFileSystem: compare(Ljava/io/File;Ljava/io/File;)
java.io.UnixFileSystem: createDirectory(Ljava/io/File;)
java.io.UnixFileSystem: createFileExclusively(Ljava/lang/String;)
java.io.UnixFileSystem: delete(Ljava/io/File;)
java.io.UnixFileSystem: delete0(Ljava/io/File;)
java.io.UnixFileSystem: getBooleanAttributes(Ljava/io/File;)
java.io.UnixFileSystem: getBooleanAttributes0(Ljava/io/File;)
java.io.UnixFileSystem: getLastModifiedTime(Ljava/io/File;)
java.io.UnixFileSystem: getLength(Ljava/io/File;)
java.io.UnixFileSystem: hashCode(Ljava/io/File;)
java.io.UnixFileSystem: isAbsolute(Ljava/io/File;)
java.io.UnixFileSystem: list(Ljava/io/File;)
java.io.UnixFileSystem: normalize(Ljava/lang/String;)
java.io.UnixFileSystem: normalize(Ljava/lang/String;II)
java.io.UnixFileSystem: parentOrNull(Ljava/lang/String;)
java.io.UnixFileSystem: prefixLength(Ljava/lang/String;)
java.io.UnixFileSystem: rename(Ljava/io/File;Ljava/io/File;)
java.io.UnixFileSystem: rename0(Ljava/io/File;Ljava/io/File;)
java.io.UnixFileSystem: resolve(Ljava/io/File;)
java.io.UnixFileSystem: resolve(Ljava/lang/String;Ljava/lang/String;)
java.io.UnixFileSystem: setLastModifiedTime(Ljava/io/File;J)
java.lang.Class: setSigners([Ljava/lang/Object;)
java.lang.ClassLoader$NativeLibrary: getFromClass()
java.lang.ref.FinalReference: <init>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)
java.lang.ref.Finalizer: <init>(Ljava/lang/Object;)
java.lang.ref.Finalizer: add()
java.lang.ref.Finalizer: register(Ljava/lang/Object;)
org.eclipse.core.internal.content.TextContentDescriber: <clinit>()
org.eclipse.core.runtime.internal.adaptor.EclipseClassLoadingHook: findLibrary(Lorg/eclipse/osgi/baseadaptor/BaseData;Ljava/lang/String;)
org.eclipse.core.runtime.internal.adaptor.EclipseClassLoadingHook: searchVariants(Lorg/eclipse/osgi/baseadaptor/BaseData;Ljava/lang/String;)
org.eclipse.jdt.internal.compiler.env.IBinaryType: <clinit>()
org.eclipse.osgi.baseadaptor.BaseData: findLibrary(Ljava/lang/String;)
org.eclipse.osgi.baseadaptor.loader.ClasspathManager: findLibrary(Ljava/lang/String;)
org.eclipse.osgi.internal.baseadaptor.BaseClassLoadingHook: findLibrary(Lorg/eclipse/osgi/baseadaptor/BaseData;Ljava/lang/String;)
org.eclipse.osgi.internal.baseadaptor.BaseClassLoadingHook: findNativePath(Lorg/eclipse/osgi/baseadaptor/BaseData;Ljava/lang/String;)
org.eclipse.osgi.internal.baseadaptor.BaseClassLoadingHook: getNativePaths(Lorg/eclipse/osgi/baseadaptor/BaseData;)
org.eclipse.osgi.internal.baseadaptor.BaseClassLoadingHook: mapLibraryNames(Ljava/lang/String;)
org.eclipse.osgi.internal.baseadaptor.BaseStorageHook: getNativePaths()
org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader: findLibrary(Ljava/lang/String;)
org.eclipse.osgi.internal.composite.CompositeConfigurator: findLibrary(Lorg/eclipse/osgi/baseadaptor/BaseData;Ljava/lang/String;)
org.eclipse.osgi.internal.loader.BundleLoader: findLibrary(Ljava/lang/String;)
org.eclipse.osgi.internal.loader.BundleLoader: findLocalLibrary(Ljava/lang/String;)
sun.nio.cs.UTF_8$Decoder: <init>(Ljava/nio/charset/Charset;)
sun.nio.cs.UTF_8$Decoder: <init>(Ljava/nio/charset/Charset;Lsun/nio/cs/UTF_8$1;)
sun.nio.cs.UTF_8$Decoder: decodeArrayLoop(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;)
sun.nio.cs.UTF_8$Decoder: decodeLoop(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;)
sun.nio.cs.UTF_8$Decoder: isMalformed3(III)
sun.nio.cs.UTF_8$Decoder: isNotContinuation(I)
sun.nio.cs.UTF_8$Decoder: malformed(Ljava/nio/ByteBuffer;ILjava/nio/CharBuffer;II)
sun.nio.cs.UTF_8$Decoder: malformedN(Ljava/nio/ByteBuffer;I)
sun.nio.cs.UTF_8$Decoder: xflow(Ljava/nio/Buffer;IILjava/nio/Buffer;II)
sun.nio.cs.UTF_8$Encoder: <init>(Ljava/nio/charset/Charset;)
sun.nio.cs.UTF_8$Encoder: <init>(Ljava/nio/charset/Charset;Lsun/nio/cs/UTF_8$1;)
sun.nio.cs.UTF_8$Encoder: encodeArrayLoop(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)
sun.nio.cs.UTF_8$Encoder: encodeLoop(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)
sun.nio.cs.UTF_8$Encoder: isLegalReplacement([B)
sun.nio.cs.UTF_8: historicalName()
sun.nio.cs.UTF_8: newDecoder()
sun.nio.cs.UTF_8: newEncoder()
sun.nio.cs.UTF_8: updatePositions(Ljava/nio/Buffer;ILjava/nio/Buffer;I)
sun.reflect.GeneratedConstructorAccessor1: newInstance([Ljava/lang/Object;)
sun.reflect.GeneratedConstructorAccessor2: newInstance([Ljava/lang/Object;)
sun.reflect.GeneratedConstructorAccessor3: newInstance([Ljava/lang/Object;)
sun.reflect.GeneratedConstructorAccessor4: newInstance([Ljava/lang/Object;)
sun.reflect.GeneratedConstructorAccessor5: newInstance([Ljava/lang/Object;)
sun.reflect.GeneratedConstructorAccessor6: newInstance([Ljava/lang/Object;)
sun.reflect.GeneratedMethodAccessor1: <init>()
sun.reflect.GeneratedMethodAccessor1: invoke(Ljava/lang/Object;[Ljava/lang/Object;)
sun.reflect.GeneratedMethodAccessor2: <init>()
sun.reflect.GeneratedMethodAccessor2: invoke(Ljava/lang/Object;[Ljava/lang/Object;)
